velodyne_points : Contains the Lidar point returns in a sensor_msgs/PointCloud2 message type. The Lidar is a Velodyne Puck VLP16 and the message are the individual packets sent by the sensor. The position of the LiDAR in car_frame is x= 1.6 m, y= 0.0 m.7

# This message holds a collection of N-dimensional points, which may
# contain additional information such as normals, intensity, etc. The
# point data is stored as a binary blob, its layout described by the
# contents of the "fields" array.

# The point cloud data may be organized 2d (image-like) or 1d
# (unordered). Point clouds organized as 2d images may be produced by
# camera depth sensors such as stereo or time-of-flight.

# Time of sensor data acquisition, and the coordinate frame ID (for 3d
# points).
Header header

# 2D structure of the point cloud. If the cloud is unordered, height is
# 1 and width is the length of the point cloud.
uint32 height
uint32 width

# Describes the channels and their layout in the binary data blob.
PointField[] fields

bool    is_bigendian # Is this data bigendian?
uint32  point_step   # Length of a point in bytes
uint32  row_step     # Length of a row in bytes
uint8[] data         # Actual point data, size is (row_step*height)

bool is_dense        # True if there are no invalid points
% % script to extract some data from the .bag-file

% % load

%open file. look at the workspace variable bag to view contents like
%available topics etc.
% bag = rosbag('G:\greenteamE7001\amzdata\2017-05-10-13-14-16.public-release.bag')
load('bag.mat');
% select a subset of the rosbag, in this case messages from the
% /velodyne_points topic
lidarbag = select(bag, 'Topic', '/velodyne_points')

% % process example, plot lidar data

% with readMessages messages can be extracted from the rosbag variable.
% 
% output is always a cell array, even with one single message. Access with
% msg{i}. Data type of the extracted message depends on the ros message type.
figure
for i=10000:1:20000
    
    msg = readMessages(lidarbag, i);
    axis square
    
    if mod(i,70) == 0
        hold off
    else
         hold on
    end
    scatter3(msg{1});
    set(gca,'XLim',[-12 12],'YLim',[-12 12],'ZLim',[-12 12])
    view(2);
    
    pause(0.01)
end
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called ''secs'')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called ''nsecs'')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: sensor_msgs/PointField
# This message holds the description of one point entry in the
# PointCloud2 message format.
uint8 INT8    = 1
uint8 UINT8   = 2
uint8 INT16   = 3
uint8 UINT16  = 4
uint8 INT32   = 5
uint8 UINT32  = 6
uint8 FLOAT32 = 7
uint8 FLOAT64 = 8

string name      # Name of field
uint32 offset    # Offset from start of point struct
uint8  datatype  # Datatype enumeration, see above
uint32 count     # How many elements in the field